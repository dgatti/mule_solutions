<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd">
	
	<flow name="upload-s3document-pnm-main" doc:id="1dc3147c-5230-4ca5-8c8d-e3a555d93e69" >
		<scheduler doc:name="Scheduler" doc:id="99ed0c9a-7563-4ba4-9dd4-c3a6957b219c" >
			<scheduling-strategy >
				<cron expression="${app.scheduler.sfpnm_to_s3}" />
			</scheduling-strategy>
		</scheduler>
		<json-logger:logger doc:name="Log Start Uploading files from Salesforce to S3 (PNM)" doc:id="2a48ff19-0dcb-47b6-8d23-7bc51a0c1117" config-ref="jsonLoggerConfig" message='Log Start Uploading files from Salesforce to S3 (PNM)'>
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: "Starting"
}]]]></json-logger:content>
		</json-logger:logger>
		<flow-ref doc:name="Get S3Documents Without Url From PNM" doc:id="fb57673f-e873-403a-96f1-6f37fc82c1b8" name="GetS3DocumentWithoutUrlFromPnm" />

		<parallel-foreach doc:name="Parallel For Each" doc:id="ba42fd96-eeff-4abe-8e17-440c4f038fa8" collection="#[payload default []]" maxConcurrency="${paralellForEach.maxConcurrency}">
			<try doc:name="Try" doc:id="dfb06ff3-83eb-49fa-aec0-91db32a8eae1">
				<ee:transform doc:name="Document Properties" doc:id="99a88ceb-8053-40d9-b499-fdc8d0a65c4f" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="contentVersionId" ><![CDATA[payload.ContentVersionId__c default '']]></ee:set-variable>
						<ee:set-variable variableName="contentDocumentId" ><![CDATA[payload.ContentDocumentId__c default '']]></ee:set-variable>
						<ee:set-variable variableName="documentTypeC" ><![CDATA[(payload.DocumentType__c default '') replace " " with "" ]]></ee:set-variable>
						<ee:set-variable variableName="S3_DocumentId" ><![CDATA[payload.S3_DocumentId__c]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Log current document IDs in debug" doc:id="8e725c4d-b2e7-45fb-8ed7-d8f71351a10e" config-ref="jsonLoggerConfig" message="Log current document IDs in debug" tracePoint="FLOW" priority="DEBUG">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    "contentDocument": vars.contentDocumentId,
    "contentDocument": vars.contentDocumentId,
    "S3_DocumentId__c": vars.S3_DocumentId
    
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Get Document From ContentVersion" doc:id="03f9dec4-6804-42d5-9216-1ef8ee3ea10a" name="GetDataFromContentDocumentPnm" target="contentDocumentData"/>
				<choice doc:name="Is ContentData present?" doc:id="98737062-ab78-4764-9bba-80df43028a93" >
					<when expression="#[!isEmpty(vars.contentDocumentData)]">
						<ee:transform doc:name="Folder and File Names" doc:id="25ed296f-8411-4584-8e0a-cb2d9991a78d">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="fileName"><![CDATA[%dw 2.0
output application/json

var folder = vars.documentTypeC
var filename = (vars.contentDocumentData.parts.file.headers."Content-Disposition".filename) replace ' ' with ''
---
if (isEmpty(folder)) 
	(filename default '')
else 
	(folder default '') ++ '/' ++ (filename default '')]]></ee:set-variable>
						<ee:set-variable variableName="content"><![CDATA[vars.contentDocumentData.parts.file.content]]></ee:set-variable>
						<ee:set-variable variableName="name"><![CDATA[vars.contentDocumentData.parts.name.content]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
						<ee:transform doc:name="Payload To S3" doc:id="ae746e48-fc78-4ec6-958d-e12716ecffbe">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="payloadToS3"><![CDATA[%dw 2.0
import dw::module::Multipart    
output multipart/form-data
---
{
	"parts": {
		"name": {
			"headers": {
				"Content-Disposition": {
					"name": "name",
					"contentDocumentId": vars.contentDocumentId,
					"subtype": "form-data"
				}
			},
			"content": vars.name
		},
		"file": {
			"headers": {
				"Content-Disposition": {
					"name": "file",
					"filename": vars.fileName,
					"contentDocumentId": vars.contentDocumentId,
					"subtype": "form-data"
				},
				"Content-Type": "application/octet-stream"
			},
			"content": vars.content
		}
	}
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
						<flow-ref doc:name="Upload Document To S3" doc:id="7d36b483-329f-4ccc-9dc9-e69e70adfa33" name="PostS3Document" />
						<ee:transform doc:name="Payload To Update s3_Document" doc:id="06a476e5-a063-4924-a227-18b74a1789d5">
				<ee:message>
				</ee:message>
					<ee:variables>
						<ee:set-variable variableName="payloadToUpdateS3Object"><![CDATA[output application/json
import substring from dw::core::Strings

var document_papi =  Mule::p('app.api.document_pnm_papi.url')
var fileName = vars.fileName

var documentUrl = document_papi replace /#1/ with fileName

---

{
	documentURL: documentUrl,
 	contentVersionId: vars.contentVersionId,
 	contentDocumentId: vars.contentDocumentId,
	Id: vars.S3_DocumentId
}]]></ee:set-variable>
					</ee:variables>
			</ee:transform>
						<flow-ref doc:name="UpdateDocumentUrlOnS3Document" doc:id="8087696d-eb27-4e8b-93d2-569bf37882a8" name="UpdateS3Document" />
					</when>
					<otherwise >
						<json-logger:logger doc:name="Empty Content Document Data in Debug" doc:id="fe770de0-b9df-4729-a0ed-5dc2c3800943" config-ref="jsonLoggerConfig" message="Empty Content Document Data in Debug" tracePoint="FLOW" priority="DEBUG">
							<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    result: "No available data for given IDs"
}]]]></json-logger:content>
						</json-logger:logger>
					</otherwise>
				</choice>
				<json-logger:logger doc:name="Document Uploaded To S3" doc:id="55bf76c6-2c32-4f07-8ede-2f6b81ac6ed7" config-ref="jsonLoggerConfig" message='Document Uploaded To S3' tracePoint="FLOW" priority="DEBUG" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    result: "Document Uploaded" 
}]]]></json-logger:content>
				</json-logger:logger>
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="5d960c2f-158a-44e1-ac09-b813795b8a92" type="ANY">
						<json-logger:logger doc:name="Logger Error in process" doc:id="b0545136-2f37-4501-9a92-6dd413803247" config-ref="jsonLoggerConfig" message="Logger Error in process" tracePoint="EXCEPTION">
							<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    errMsg: error.errorMessage,
	errDesc: error.description,
	errType: error.errorType.asString
}]]]></json-logger:content>
						</json-logger:logger>
					</on-error-continue>
				</error-handler>
			</try>
		</parallel-foreach>

		<json-logger:logger doc:name="Log End Uploading files from Salesforce to S3 (PNM)" doc:id="afbd4ecf-0e33-4e51-a005-85029b0f3fce" config-ref="jsonLoggerConfig" message='Log End Uploading files from Salesforce to S3 (PNM)' tracePoint="END" >
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: "Finishing"
}]]]></json-logger:content>
		</json-logger:logger>
		
	</flow>
	
	
	</mule>
