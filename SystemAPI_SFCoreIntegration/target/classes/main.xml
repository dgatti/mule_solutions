<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:salesforce-composite="http://www.mulesoft.org/schema/mule/salesforce-composite"
	xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/salesforce-composite http://www.mulesoft.org/schema/mule/salesforce-composite/current/mule-salesforce-composite.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<!-- <json-logger:config name="JSON_Logger_Config" doc:name="JSON Logger 
		Config" doc:id="0579430a-4ced-4b5f-bc4d-8be0faf8efb8" environment="$(env)" 
		/> -->
	<sub-flow name="main-query-ves-esr-by-id-flow" doc:id="25e68f24-cb45-47b8-953d-b73c83855eeb" >
		<json-logger:logger doc:name="Log VA_ESR__c Id" doc:id="9953918a-3ded-4ebc-a277-4a498c8d762f" config-ref="jsonLoggerConfig" message="VA_ESR__c Id">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: JSONLoggerModule::stringifyNonJSON(vars.esr_id) 
}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try" doc:id="1fb35cc6-f655-431b-8533-51db77c1f306" >
			<salesforce:query doc:name="Query VA_ESR__c" doc:id="2c1206fe-1091-492b-9714-e3d2eec68d71" config-ref="salesforceConfig">
				<salesforce:salesforce-query ><![CDATA[SELECT Id, firstName__c, fullName__c, lastName__c, middleName__c, examSchedulingRequestUuid__c
FROM VA_ESR__c
WHERE examSchedulingRequestUuid__c = ':param']]></salesforce:salesforce-query>
				<salesforce:parameters ><![CDATA[#[output application/java
---
{
	"param" : vars.esr_id
}]]]></salesforce:parameters>
			</salesforce:query>
			<ee:transform doc:name="Transform Message" doc:id="12b937a4-89a2-4e82-9c88-5cf3e8806a64" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="15a2f5d6-5eda-4818-8105-177aa247b9ad" type="SALESFORCE:INVALID_INPUT">
					<set-variable value="404" doc:name="Set httpStatus" doc:id="c4590ee6-1580-41a5-98a2-5a614545b343" variableName="httpStatus" />
					<ee:transform doc:name="Transform Message" doc:id="2b449361-cb63-4e83-93e6-a14e0acc04ed" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	errorCode: "NOT_FOUND",
	errorMessage: "Record not found",
	transactionId: correlationId,
	timeStamp: now(),
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
				</on-error-continue>
			</error-handler>
		</try>
	</sub-flow>
	<sub-flow name="main-persist-period-of-service-flow"

		doc:id="6d6010bc-5cbd-472a-88ed-479d8bfc32e4">
		<ee:transform doc:name="Transform to JSON Payload"
			doc:id="49073553-207e-49ed-994f-c3c3694e4664">

			<ee:message>
				<ee:set-payload><![CDATA[import dw::module::ExamManagement
output application/json

var result = ExamManagement::buildVAPeriodOfServiceCustomObjectPayload(payload)
---
result]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:create type="VA_Period_of_Service__c"
			doc:name="Create VA Period_of_Service"

			doc:id="4ff23a53-292a-4807-b9f0-1d3cf59af930"

			config-ref="salesforceConfig" readTimeout="10000"
			readTimeoutUnit="MILLISECONDS" target="periodserviceResponse">
			<reconnect count="4"/>
			<salesforce:records><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:create>
		<json-logger:logger
			doc:name="Log Period Of Service"

			doc:id="01d4b291-1795-45da-83c5-b9b63520ab99"

			config-ref="jsonLoggerConfig" message="RECORD CREATED"
			tracePoint="END">
		</json-logger:logger>
		<ee:transform doc:name="Transform Message"

			doc:id="ce55b8a3-88d0-4a2f-8135-14ec1d9dddac">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	code: "201",
	recordId: vars.periodserviceResponse.items[0].id,
	message: "VA_Period_of_Service successfully created"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="create-s3-document-custom-object-flow"
		doc:id="2d4ae188-5659-49f6-b0de-2fe3f3fd36a8">
		<ee:transform doc:name="Transform to JSON Payload1"
			doc:id="7059af02-d99d-4e4b-91aa-99736ddc4ae4">
			<ee:message>
				<ee:set-payload><![CDATA[import dw::module::S3DocumentTransform
output application/json

var result = S3DocumentTransform::convertS3DocumentSapiToS3DocumentCustomObject(payload)
---
result]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<json-logger:logger
			doc:name="Log S3 Document Payload"

			doc:id="947cb37f-9b62-493a-80e9-2118b96610b3"

			config-ref="jsonLoggerConfig" message="S3 DOCUMENT PAYLOAD"
			tracePoint="BEFORE_REQUEST"/>
		<salesforce:create type="S3_Document__c"
			doc:name="Create S3 Document"

			doc:id="71d748a0-1f1a-4918-9589-e5e4ed3bc70a"

			config-ref="salesforceConfig" readTimeout="10000"
			readTimeoutUnit="MILLISECONDS" target="s3DocumentResponse">
			<reconnect count="4"/>
			<salesforce:records><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:create>
		<json-logger:logger
			doc:name="Log S3 Document Result"

			doc:id="7a1d665d-3ca5-4dff-b127-0eb22a9011a2"

			config-ref="jsonLoggerConfig" message="S3 DOCUMENT RESULT">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule 

output application/json 
---
{
    payload: JSONLoggerModule::stringifyNonJSON(vars.s3DocumentResponse) 
}]]]></json-logger:content>
		</json-logger:logger>
	</sub-flow>
	
	
	<flow name="main-s3-document-persist-event-flow"

		doc:id="a4df6db7-b701-485d-bba6-241271d9918b">
		<flow-ref doc:name="Flow Reference"
			doc:id="6acb50f4-3988-4eb5-af81-6960f72134af"
			name="create-s3-document-custom-object-flow"/>
		<ee:transform doc:name="Transform Message"
			doc:id="75db481c-ed3c-4f89-99a3-5692832baaae">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	status: "success",
	message: "S3 Document has been created successfully"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>

	<flow name="pnm-sync-data-flow"

		doc:id="79bff774-04d3-46c9-ace4-75c8465bf3a8">
		<json-logger:logger
			doc:name="Core sync log payload"
			doc:id="efa26bc3-7718-4052-ac9e-d89c8c9db2c3"
			config-ref="jsonLoggerConfig" message="SYNC START"/>
		<set-variable value="#[payload.objectName]"
			doc:name="targetObjName"
			doc:id="7da8e157-99d1-41cf-af0a-77e7e06045cf"
			variableName="targetObjName"/>
		<set-payload value="#[payload.syncData]"
			doc:name="payload.syncData"
			doc:id="9e913ec3-fdc9-47e6-9bfb-d122d8aa0dbe"/>
		<ee:dynamic-evaluate
			doc:name="transform to target format"
			doc:id="9f842087-b9ed-4056-939d-bc34f04bb449"
			expression='#[readUrl("classpath://dwl/" ++ vars.targetObjName ++ "_transform.dwl", "text/plain")]'/>
		<json-logger:logger
			doc:name="Before request Payload"
			doc:id="4d5c78f9-1e00-4f55-8ba9-d349da3d237a"
			config-ref="jsonLoggerConfig" message="CORE REQUEST PAYLOAD"
			tracePoint="BEFORE_REQUEST"/>
		<salesforce:upsert doc:name="Upsert to Target"
			doc:id="e4c5e5ea-075e-444d-9c12-b63691d3e7ae"

			config-ref="salesforceConfig"
			objectType="#[p('target.' ++ vars.targetObjName ++ '.objectName')]"
			externalIdFieldName="#[p('target.' ++ vars.targetObjName ++ '.externalId')]"/>
		<json-logger:logger
			doc:name="After request Payload"

			doc:id="9ab4463f-3926-4748-928c-de7c289ab3de"
			config-ref="jsonLoggerConfig" message="COMPOSITE RESPONSE PAYLOAD"
			tracePoint="AFTER_REQUEST"/>
		<choice doc:name="Choice"
			doc:id="28a1eb3f-cb50-4689-b49c-d4fe7b85c179">
			<when expression="#[payload.successful == true]">
				<ee:transform doc:name="upserted Ids"
					doc:id="f8fa1d9d-e75b-4928-a46a-8fea93685158">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload.items.id]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger"

					doc:id="d416ca8f-74aa-43ce-b9f9-9251c606ba83" message="#[payload]"/>
				<ee:transform doc:name="api Response"
					doc:id="88153ba2-d17b-4e1e-a968-91cff7b045fd">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    "status": "Success",
    "objectName": vars.targetObjName,
    "description" : "Upserted successfully",
    "upserted Ids": payload
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger"
					doc:id="d8811a2e-998b-4228-bdad-91aa27b6b3bd"
					message="#[%dw 2.0&#10;output application/json&#10;---&#10;payload]"/>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="API Response"

			doc:id="244364b9-77d9-49bb-a1bd-6d7c7f3b1f45"

			config-ref="jsonLoggerConfig" message="API RESPONSE" tracePoint="END"/>
		<error-handler>
			<on-error-propagate enableNotifications="true"
				logException="true" doc:name="On Error Propagate"

				doc:id="c61b164d-f5f5-4c14-9bba-1d329930a9be">
				<logger level="INFO" doc:name="Error Logger"
					doc:id="148800a3-5d38-4ae1-8221-d865dfeaff0f"
					message='#[(error.errorType.asString default "") ++  " : " ++ error.detailedDescription]'/>
				<set-variable value="500" doc:name="httpstatus"
					doc:id="5898c43d-b7ee-47a5-b222-803d29c89eb6"
					variableName="httpstatus"/>
				<ee:transform doc:name="error payload"
					doc:id="091b41b5-c5fb-4d93-9f74-76105656adf3">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	status: "Error",
	description: error.detailedDescription
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	
	
	<flow name="pnm-composite-sync-data-flow"

		doc:id="e8a8ac33-72df-4926-abec-75348621570d">
		<json-logger:logger
			doc:name="Composite core sync log payload"
			doc:id="83d18d20-3404-4c07-b048-87de0d1907a5"
			config-ref="jsonLoggerConfig" message="COMPOSITE SYNC START"/>
		<set-variable value="#[payload.objectName]"
			doc:name="targetObjName"
			doc:id="434b3305-b973-41e1-ba94-abd32c1216d7"
			variableName="targetObjName"/>
		<set-payload value="#[payload.syncData]"
			doc:name="payload.syncData"
			doc:id="f4254386-55f4-4924-881c-ea18eab2db34"/>
		<ee:transform doc:name="origPayload"
			doc:id="889ae9c8-11bb-440e-ae5f-23946b57ad33">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="origPayload"><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<flow-ref doc:name="get_pnm_recortType_subFlow"
			doc:id="1daf242b-2b9c-4ee9-90cd-78ddfec73301"
			name="get_pnm_recortType_subFlow" target="pnmRT"/>
		<flow-ref doc:name="get_core_recortType_subFlow"
			doc:id="6ec5849d-1839-4b6c-b1e1-0afb51bf2027"
			name="get_core_recortType_subFlow" target="coreRT"/>
		<ee:dynamic-evaluate
			doc:name="transform to target format"
			doc:id="dfd00512-6096-4308-8500-9e6f28b3cee1"
			expression='#[readUrl("classpath://dwlCompositeGraphs/" ++ vars.targetObjName ++ "_transform.dwl", "text/plain")]'/>
		<json-logger:logger
			doc:name="Before request Payload"
			doc:id="c3afdb5b-9af0-4ccd-a89e-637c5073a2d1"
			config-ref="jsonLoggerConfig" message="COMPOSITE REQUEST PAYLOAD"
			tracePoint="BEFORE_REQUEST">
		</json-logger:logger>
		<flow-ref doc:name="getSalesforceToken"
			doc:id="9e4445a7-89b1-47ee-88b6-36e4d6fab520"
			name="getSalesforceToken" target="sfToken"/>
		<choice doc:name="Choice" doc:id="55ee0581-7b66-475d-b6e4-8877225479ad" >
			<when expression="#[vars.targetObjName == 'AccountContactRelation']">
				<http:request method="POST" doc:name="Request SF Core Rest API - composite" doc:id="a1e7aefc-a602-4229-9a03-f09c0a44c30f" config-ref="HTTP_Request_configuration_SFCore_RestApi" path="/services/data/v53.0/composite">
			<http:headers><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.sfToken
}]]]></http:headers>
		</http:request>
			</when>
			<otherwise >
				<http:request method="POST" doc:name="Request SF Core Rest API -GRAPH" doc:id="7be9286f-bd77-4b75-966c-308d4efef3fe" config-ref="HTTP_Request_configuration_SFCore_RestApi" path="/services/data/v53.0/composite/graph" >
					<http:headers ><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.sfToken
}]]]></http:headers>
				</http:request>
			</otherwise>
		</choice>
		<choice doc:name="check for RecordType Error"
			doc:id="99615ea5-3b34-4fb3-acd4-6d7d66786cad">
			<when
				expression="#[(flatten(flatten(payload.graphs.graphResponse.compositeResponse).body)).message contains 'Cannot specify any additional fields when marrying or separating a Person-Account']">
				<logger level="INFO" doc:name="Logger"
					doc:id="d74abd7c-d6b5-4f83-a455-b66ec664b5bf"
					message="DATA Issue on the CORE. Record exists with invalid RecortType on Core."/>
			</when>
		</choice>
		<json-logger:logger
			doc:name="After request Payload"

			doc:id="37934bdd-08f1-462c-b20e-3abdaf613bc7"
			config-ref="jsonLoggerConfig" message="COMPOSITE RESPONSE PAYLOAD"
			tracePoint="AFTER_REQUEST"/>
		<choice doc:name="Choice"
			doc:id="e36a66fd-7c04-4582-a4fd-4f31e3daca37">
			<when
				expression="#[!(payload.graphs.isSuccessful contains false)]">
				<ee:transform doc:name="upserted Ids"
					doc:id="40cefbee-4afc-4d6f-8c71-ccb9061b4b2f">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---

if ( vars.targetObjName != "AccountContactRelation")

(flatten((payload.graphs.graphResponse map {
    Id: $.compositeResponse map {
        Id: $.body.id
    }
}).Id).Id)

else 

(flatten(((payload.compositeResponse)).body.records) filter ($.attributes.'type' == 'AccountContactRelation')).Id]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<ee:transform doc:name="api Response"

					doc:id="0b73319e-bfe7-400e-a8ab-23e63f0f4788">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    "status": "Success",
    "objectName": vars.targetObjName,
    "description" : "Upserted successfully",
    "upserted Ids": payload
   
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<set-variable value="500" doc:name="httpstatus"
					doc:id="914816ca-1c35-43e1-b6f1-705c9bdc4850"
					variableName="httpstatus"/>
				<!-- [STUDIO:"api Response"] <ee:transform doc:name="api Response" doc:id="406ff720-6056-46b6-b6b7-6a6c4b8c6402"> 
					<ee:message> <ee:set-payload><![CDATA[%dw 2.0 output application/json &#45;&#45;- 
					{ status: "Error", "API": "sfCore-sapi", "objectName": vars.targetObjName, 
					"description" : "Upsert failed on composite request", "errors": ((vars.origPayload 
					map (item,index) ->{ "objId": item.Id, "error": (flatten(flatten(payload.graphs.graphResponse.compositeResponse).body))[index&#93; 
					}) filter ($.error.errorCode != 'PROCESSING_HALTED' and $.error.success != 
					true)) map { "objId": $.objId, "message": $.error.message, ("fields": $.error.fields 
					joinBy ',') if (!isEmpty($.error.fields))} }&#93;&#93;></ee:set-payload> 
					</ee:message> </ee:transform> [STUDIO] -->
				<ee:transform doc:name="error Resp"
					doc:id="cb0b45ba-2456-42ab-bff0-a34cf5d75587">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
{
	status: "Error",
    "API": "sfCore-sapi",
    "objectName": vars.targetObjName,
    "description" : "Upsert failed on composite request",
	"errors": (vars.origPayload map (item,index) -> {
		
		"pnmObjId": item.Id,
		(error: (((
 	payload.graphs map (grp,index1) -> {
  	"objIdErrors": 
      (flatten(grp.graphResponse.compositeResponse.body) filter ($.errorCode != null and $.errorCode != 'PROCESSING_HALTED')) map {
      	"message": $.message,
    	("fields": $.fields joinBy ',') if (!isEmpty($.fields))
      }    
}
)[index]).objIdErrors) )


	}) filter ($.error.message != null)
 
 

}


]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="API Response"

			doc:id="1fe1df15-ed63-4890-80b8-9a6b7e6193d7"

			config-ref="jsonLoggerConfig" message="COMPOSITE API RESPONSE"
			tracePoint="END"/>
		<error-handler>
			<on-error-propagate enableNotifications="true"
				logException="true" doc:name="On Error Propagate"

				doc:id="7254457d-f809-43e9-a421-9949559f3c39">
				<logger level="INFO" doc:name="Error Logger"
					doc:id="ec98daaf-1bf2-42d8-87d8-a7fd4337fb72"
					message='#[(error.errorType.asString default "") ++  " : " ++ error.detailedDescription]'/>
				<set-variable value="500" doc:name="httpstatus"
					doc:id="afa7678f-58cf-4148-9f0e-6d6ebcb9b6f6"
					variableName="httpstatus"/>
				<ee:transform doc:name="error payload"
					doc:id="b14c5dc4-ea75-4fc3-a430-ff3e9208f777">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	status: "Error",
	"objectName": vars.targetObjName,
	description: error.detailedDescription
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	
	
	<sub-flow name="main-persist-dbq-flow"

		doc:id="703de0ef-d61b-4bad-8771-0f2907f71380">
		<ee:transform doc:name="Transform to JSON Payload"
			doc:id="5cb9535a-55d5-4147-8882-e93ad574a04d">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
		"VA_ESR__c": payload.VA_ESR,
		"name__c": payload.name,
		"VA_Contention__c": payload.VA_Contention,
		"NarrativeEntry__c": payload.NarrativeEntry,
		"Rework_Reason__c": payload.ReworkReason,
		"Rework_Reason_Free_Text__c": payload.ReworkReasonFreeText
	}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:create type="VA_DBQ__c"
			doc:name="Create VA DBQ"

			doc:id="19276459-24b2-4ad8-843b-1464e37b74d6"

			config-ref="salesforceConfig" readTimeout="10000"
			readTimeoutUnit="MILLISECONDS" target="vaRow">
			<reconnect count="4"/>
			<salesforce:records><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:create>
		<json-logger:logger doc:name="Log DBQ"

			doc:id="4083cd15-f19c-4b52-bd04-82522e4a3d3c"
			config-ref="jsonLoggerConfig" message="DBQ RECORD CREATED"
			tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: JSONLoggerModule::stringifyNonJSON(vars.vaRow) 
}]]]></json-logger:content>
		</json-logger:logger>
		<ee:transform doc:name="Transform Message"
			doc:id="4a0afa9c-25c4-4176-b047-7b44da1934fa">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	code: "201",
	recordId: vars.vaRow.items[0].id,
	message: "VA_DBQ successfully created"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>


	<sub-flow name="main-persist-va-medical-opinion-flow"

		doc:id="2e07f24e-e636-4284-ac81-f6610cdf666f">
		<ee:transform doc:name="Transform to JSON Payload"
			doc:id="7bb1c7e2-ddb1-433f-ba79-2fb3ab99f843">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0

output application/json
---
payload mapObject ((value, key) -> {
	("$(key)__c": value)
})]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:create type="Medical_Opinion__c"
			doc:name="Create VA Medical_Opinion"

			doc:id="7343aac7-5629-4075-89fc-fd2ce742c1c9"

			config-ref="salesforceConfig" readTimeout="10000"
			readTimeoutUnit="MILLISECONDS" target="vaRow">
			<reconnect count="4"/>
			<salesforce:records><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:create>
		<json-logger:logger doc:name="Log Medical_Opinion"

			doc:id="c790e6f0-d489-419a-873f-7a74e92fa54a"
			config-ref="jsonLoggerConfig" message="Medical Opinion RECORD CREATED"
			tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: JSONLoggerModule::stringifyNonJSON(payload)
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice"
			doc:id="cc35b2e0-985e-4ece-aa5c-bb8505822406">
			<when expression="#[vars.vaRow.items[0].id == null]">
				<json-logger:logger doc:name="Log Exception"
					doc:id="528361ae-93cb-48e6-a93d-e0ec4ba90bd8"
					config-ref="jsonLoggerConfig" message="ERROR LOG">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: vars.vaRow 
}]]]></json-logger:content>
				</json-logger:logger>
				<set-variable value="400" doc:name="Set Variable"
					doc:id="7ad42907-bebb-4bb3-b9a0-f3a9c603beca"
					variableName="httpStatus"/>
				<ee:transform doc:name="Transform Message"
					doc:id="ed7805bb-370d-4056-95cf-a87866861e27">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	errorCode: "VA_ESR_PERSIST_ERROR",
	errorMessage: vars.vaRow.items[0].message,
	transactionId: correlationId,
	timeStamp: now()
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<ee:transform doc:name="Transform Message"
					doc:id="0bcffe9f-ab9d-4ba6-ae94-6bbdccff38ba">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	code: "201",
	recordId: vars.vaRow.items[0].id,
	message: "Medical_Opinion successfully created"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>


	<sub-flow name="main-persist-va-contentions-flow"

		doc:id="604ca5ed-5c52-49c3-80ad-5501d1eaa7f1">
		<ee:transform doc:name="Transform to JSON Payload"
			doc:id="26f3d4f4-fcf9-400f-8d4e-46ef33b64e6e">

			<ee:message>
				<ee:set-payload><![CDATA[import dw::module::ExamManagement
output application/json

var result = ExamManagement::buildVAContentionsCustomObjectPayload(payload)
---
result]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:create type="VA_Contentions__c"
			doc:name="Create VA Contentions"

			doc:id="fd068298-079c-40e1-a61d-75d8a9b4bdf3"

			config-ref="salesforceConfig" readTimeout="10000"
			readTimeoutUnit="MILLISECONDS" target="contentionResponse">
			<reconnect count="4"/>
			<salesforce:records><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:create>
		<json-logger:logger doc:name="Log Contentions"

			doc:id="6c106167-3470-4216-b783-1d40f44e4365"
			config-ref="jsonLoggerConfig" message="Contention RECORD CREATED"
			tracePoint="END"/>
		<ee:transform doc:name="Transform Message"
			doc:id="0dee6ed6-aad2-4690-bd15-538eaf986612">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	code: "201",
	recordId: vars.contentionResponse.items[0].id,
	message: "VA_Contentions successfully created"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>


	<sub-flow name="main-persist-va-esr-flow"

		doc:id="ce14e803-64ec-42fa-b2b4-3fbdf0ed1ae6">
		<ee:transform doc:name="Transform to JSON Payload"
			doc:id="ae2adf7d-286b-42e1-8486-5041b68c1bd9">

			<ee:message>
				<ee:set-payload><![CDATA[import dw::module::ExamManagement
output application/java

var result = ExamManagement::buildVAESRCustomObjectPayload(payload)
---
result]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:create type="VA_ESR__c"
			doc:name="Create VA ESR"

			doc:id="8787d3f5-77ea-4710-b741-743a64561c21"

			config-ref="salesforceConfig" readTimeout="10000"
			readTimeoutUnit="MILLISECONDS" target="esrResponse">
			<reconnect count="4"/>
			<salesforce:records><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:create>
		<json-logger:logger doc:name="Log ESR"

			doc:id="4cb7c388-48e6-42fd-9b49-2761c6861545"
			config-ref="jsonLoggerConfig" message="ESR RECORD CREATED"
			tracePoint="END">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: JSONLoggerModule::stringifyNonJSON(vars.esrResponse) 
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice"
			doc:id="b76a9ac7-7d22-40f1-aa69-f43555e4eb57">
			<when expression="#[vars.esrResponse.items[0].id == null]">
				<json-logger:logger doc:name="Log Exception"
					doc:id="ad8b1abc-614c-4d7c-b4ee-f9c516cfa4ef"

					config-ref="jsonLoggerConfig" message="ERROR LOG">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: JSONLoggerModule::stringifyNonJSON(vars.esrResponse.items[0]) 
}]]]></json-logger:content>
				</json-logger:logger>
				<set-variable value="400" doc:name="Set Variable"

					doc:id="6ee2ca0a-bc99-4849-9cbc-f99cb46c942b"
					variableName="httpStatus"/>
				<ee:transform doc:name="Transform Message"
					doc:id="00adb260-caef-4eb0-a1de-889042e697ae">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	errorCode: "VA_ESR_PERSIST_ERROR",
	errorMessage: vars.esrResponse.items[0].message,
	transactionId: correlationId,
	timeStamp: now()
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<ee:transform doc:name="Transform Message"

					doc:id="711bed1e-9726-4575-87fc-9dd5e9253074">

					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	code: "201",
	recordId: vars.esrResponse.items[0].id,
	message: "VA_ESR__c successfully created"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<flow name="main-query-document-data-s3-flow"

		doc:id="0e637e14-b347-4bcf-9017-bcb26d07b38c">
		<json-logger:logger doc:name="Logger"
			doc:id="1877da5e-477c-4ee2-9ae5-51fec5795efa"

			config-ref="jsonLoggerConfig"
			message='#["begin request to S3_Document"]'
			tracePoint="BEFORE_REQUEST"/>
		<salesforce:query
			doc:name="Query Recover without url S3 Documents"

			doc:id="e4fb618a-4198-4fb7-ba80-436270b15239"

			config-ref="salesforceConfig">
			<salesforce:salesforce-query><![CDATA[SELECT ContentDocumentId__c, ContentVersionId__c, DocumentType__c FROM S3_Document__c WHERE Document_URL__c = null and ContentVersionId__c <> null]]></salesforce:salesforce-query>
		</salesforce:query>
		<!-- [STUDIO:"Transform Message"] <ee:transform doc:name="Transform Message" 
			doc:id="2abd25b6-42bd-4e5f-a737-fb21788e6731" > <ee:message > <ee:set-payload 
			><![CDATA[%dw 2.0 output application/java &#45;&#45;- [ { "ContentVersionId__c": 
			"068BZ000001Vmh0YAC", "ContentDocumentId__c": "069BZ000001XzdtYAC", "VA_Inbound_Request__c": 
			"", "Document_URL__c": "", "ESR__c": "", "VA_Outbound_Request__c": "", "Event_Type__c": 
			"", "Document_Size_Bytes__c": "" }, { "ContentVersionId__c": "068BZ000001VRWdYAO", 
			"ContentDocumentId__c": "069BZ000001XecAYAS", "VA_Inbound_Request__c": "", 
			"Document_URL__c": "", "ESR__c": "", "VA_Outbound_Request__c": "", "Event_Type__c": 
			"", "Document_Size_Bytes__c": "" } ]]]></ee:set-payload> </ee:message> </ee:transform> 
			[STUDIO] -->

		<!-- [STUDIO:"Create"] <salesforce:create doc:name="Create" doc:id="6fd9d33a-e9d5-4022-99d2-cf32b4931e60" 
			config-ref="salesforceConfig" type="S3_Document__c"/> [STUDIO] -->
		<choice doc:name="" doc:id="f277e412-b9db-44f3-8112-729f8666cb55">
			<when expression="#[!isEmpty(payload)]">
				<ee:transform doc:name="ContetVersionIDList" doc:id="a40a5d45-d262-4485-8de1-bed52e5afe62">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<json-logger:logger doc:name="Logger" doc:id="f20c4897-9f19-456a-9dd3-e9ed98b8473a" config-ref="jsonLoggerConfig" message='#["End process"]' tracePoint="AFTER_REQUEST" />
			</when>
			<otherwise>
				<ee:transform doc:name="error payload" doc:id="55eaa774-7a47-4563-ae46-67718f497517">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	errDesc: "Collection is empty",
	errType: "VALIDATION:EMPTY_COLLECTION",
	transactionId: correlationId,
	timeStamp: now()
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<set-variable value="404" doc:name="404" doc:id="dbfc5382-2819-4f40-8cec-444fe094e279" variableName="httpstatus" />
			</otherwise>
		</choice>
	</flow>
	<flow name="main-query-document-version-data-flow"

		doc:id="fd1c0443-4097-42ee-a4a0-b98a0cafdda5">
		<json-logger:logger doc:name="Logger"
			doc:id="d41f66a8-d2cd-4701-826f-eb15968bb430"

			config-ref="jsonLoggerConfig"
			message='#["begin request to Content Version"]'
			tracePoint="BEFORE_REQUEST"/>
		<salesforce:query
			doc:name="Query Recover Document From ContentVersion"

			doc:id="5a81e2d0-fd6c-4293-9dbd-e0cb9bd456d8"

			config-ref="salesforceConfig" readTimeout="${query.timeout}" readTimeoutUnit="MILLISECONDS" target="dataVersion">
			<salesforce:salesforce-query><![CDATA[SELECT PathOnClient,VersionData FROM ContentVersion WHERE Id = ':contentVersionId' AND ContentDocumentId = ':contentDocumentId']]></salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output application/java
---
{
	contentDocumentId : vars.contentDocumentId,
	contentVersionId : vars.contentVersionId
}]]]></salesforce:parameters>
		</salesforce:query>
		<choice doc:name="" doc:id="0101692e-f508-4ec6-a88d-5edc44d173a3">
			<when expression="#[!isEmpty(vars.dataVersion[0])]">
				<ee:transform doc:name="VarDefinitions" doc:id="e25b388d-45eb-4698-8fb3-e7d67aec3458">

			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="content"><![CDATA[%dw 2.0
import * from dw::core::Binaries
output application/octet-stream
---
//fromBase64(payload[0].VersionData as String) as Binary
vars.dataVersion[0].VersionData
]]></ee:set-variable>
				<ee:set-variable variableName="file"><![CDATA[%dw 2.0
output application/java
---
((vars.dataVersion[0].PathOnClient splitBy  ".")[0] ++ "-" ++ vars.contentDocumentId ++ ".") ++ ((vars.dataVersion[0].PathOnClient splitBy  ".")[1])]]></ee:set-variable>
				<ee:set-variable variableName="name"><![CDATA[%dw 2.0
output application/java
---
(vars.dataVersion[0].PathOnClient splitBy  ".")[0]]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<ee:transform doc:name="multipartFormData" doc:id="d6cea52e-031a-4198-b0e9-0a90999a39e5">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import dw::module::Multipart    
output multipart/form-data
---

{
	"parts": {
		"name": {
			"headers": {
				"Content-Disposition": {
					"name": "name",
					"contentDocumentId": vars.contentDocumentId,
					"subtype": "form-data"
				}
			},
			"content": vars.name
		},
		"file": {
			"headers": {
				"Content-Disposition": {
					"name": "file",
					"filename": vars.file,
					"contentDocumentId": vars.contentDocumentId,
					"subtype": "form-data"
				},
				"Content-Type": "application/octet-stream"
			},
			"content": vars.content
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<json-logger:logger doc:name="Logger" doc:id="24a4e0c3-2245-427b-8535-91e1ffd7d745" config-ref="jsonLoggerConfig" message='#["End process"]' tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: JSONLoggerModule::stringifyNonJSON(payload.parts.file) 
}]]]></json-logger:content>
		</json-logger:logger>
				<logger level="INFO" doc:name="Logger" doc:id="6f7547e4-5a07-4c55-8ec7-bea375bb5eca" message="#[payload]" />
			</when>
			<otherwise>
				<ee:transform doc:name="error payload" doc:id="7cb96b5d-3f19-4c6d-8444-89807f9b44d3">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	errorCode: "VALIDATION:EMPTY_COLLECTION",
	errorMessage: "Collection is empty, verify parameters IDs",
	transactionId: correlationId,
	timeStamp: now()
	//errDesc: "Collection is empty, verify parameters IDs",
	//errType: "VALIDATION:EMPTY_COLLECTION"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<set-variable value="404" doc:name="404" doc:id="c28500d3-d249-44e0-96ba-2ab953827b1e" variableName="httpstatus" />
			</otherwise>
		</choice>
		<error-handler>
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="2177f988-8617-4be2-9bdb-157bbab49879" type="ANY">
				<ee:transform doc:name="error payload" doc:id="2bf723c5-e515-41ce-b11f-fe13040f193c" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	errDesc: error.description,
	errType: error.errorType.asString
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<set-variable value="400" doc:name="400" doc:id="081a0be8-e8b9-4828-8a5b-c4af5914aa35" variableName="httpstatus" />
			</on-error-propagate>
		</error-handler>
	</flow>
	<sub-flow name="main-update-s3-document-custom-object-flow"
		doc:id="03a885fc-e440-4ba9-9928-8d03beea77ba">
		<json-logger:logger
			doc:name="Log S3 Document update"
			doc:id="f9852a45-4e29-4f68-be0f-6685a2987bb1"
			config-ref="jsonLoggerConfig" message='#["S3 DOCUMENT UPDATE"]'
			tracePoint="BEFORE_REQUEST"/>
		<ee:transform doc:name="Transform to JSON Payload"
			doc:id="81304152-2a8a-4e6f-a7ad-ce050401f983">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
  		"ContentVersionId__c": payload.contentVersionId,
  		"ContentDocumentId__c":payload.contentDocumentId,
		"Document_URL__c": payload.documentURL,
		"Id": payload.Id
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<try doc:name="Try" doc:id="f5d5b475-f6ac-4c07-b95e-503dbe188c72" >
			<choice doc:name="Choice" doc:id="694454a2-816e-4242-8d1f-95336c872715" >
				<when expression="#[!isEmpty(payload.Id)]">
					<salesforce:upsert objectType="S3_Document__c" externalIdFieldName="Id" doc:name="Upsert" doc:id="82973865-b7ae-49b4-bc19-5cf788591238" config-ref="salesforceConfig" target="urlUpdate" >
						<salesforce:records ><![CDATA[#[[payload]]]]></salesforce:records>
					</salesforce:upsert>
				</when>
				<otherwise >
					<salesforce:upsert objectType="S3_Document__c" externalIdFieldName="ContentDocumentId__c" doc:name="Upsert" doc:id="7ab7bac6-88d2-4444-9ddd-8afac0df324b" config-ref="salesforceConfig" target="urlUpdate" >
						<salesforce:records ><![CDATA[#[[payload]]]]></salesforce:records>
					</salesforce:upsert>
				</otherwise>
			</choice>
			<choice doc:name="Choice" doc:id="73b15fef-a70b-4b0d-a8f5-be5d45dfecca">
			<when expression="#[vars.urlUpdate.items[0].successful == true]">
				<json-logger:logger doc:name="Log S3 Document Result" doc:id="3f9e90d3-cdae-4e99-adee-f659b3843edd" config-ref="jsonLoggerConfig" message="S3 DOCUMENT RESULT">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule 

output application/json 
---
{
    payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
				<ee:transform doc:name="Transform Message" doc:id="22b70ca9-3c15-478d-9885-7f340f89b609">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	status: "success",
	message: "S3 Document has been updated successfully"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</when>
			<otherwise>
					<ee:transform doc:name="error payload" doc:id="13e3c06e-440e-441b-b39e-0d32629ccc93">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	errorCode: "UPSERT_URL_UPDATE_ERROR",
	errorMessage: vars.urlUpdate.items[0].message,
	transactionId: correlationId,
	timeStamp: now()
	//errDesc: "Upsert failed, invalid input, verify parameters",
	//errType: "VALIDATION:INVALID_INPUT"
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<set-variable value="400" doc:name="400" doc:id="059eedf5-d11f-4ae9-ad50-d02ef8f5caeb" variableName="httpStatus" />
			</otherwise>
		</choice>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="9fa8f7c0-b411-4797-85b6-c0d2db73a6cd" type="ANY">
					<ee:transform doc:name="error payload" doc:id="6152cfa9-84da-4c3e-8fa9-c020f5e13fe9" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	errDesc: error.description,
	errType: error.errorType.asString
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<set-variable value="400" doc:name="400" doc:id="325f8242-e83b-4819-9fb1-3c614f763d69" variableName="httpStatus" />
				</on-error-propagate>
			</error-handler>
		</try>
	</sub-flow>

	<flow name="main-query-content-version-object-by-param-flow"

		doc:id="91c018f9-3a8f-46f5-807b-fdb214ab094a">
		<salesforce:query doc:name="Query"
			doc:id="5b1d9f39-e963-4e44-9e7f-56b13e5116c3"

			config-ref="salesforceConfig" readTimeout="#[5000]"
			readTimeoutUnit="SECONDS">
			<salesforce:salesforce-query><![CDATA[SELECT ContentBodyId, Title, ContentSize, OwnerId, FileType, FileExtension, Description, VersionData 
FROM ContentVersion
WHERE ContentDocumentId = ':param'
ORDER BY VersionNumber DESC
LIMIT 1
]]></salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output application/java
		---
		{
			param : vars.contentBodyId
		}]]]></salesforce:parameters>
		</salesforce:query>
		<ee:transform doc:name="Transform Message"

			doc:id="6284a1cc-dd8b-4e1c-b17f-36c319f50a80">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
		output application/json
		---
		payload map {
			id: $.ContentBodyId,
			title: $.Title,
			owner: $.OwnerId,
			size: $.ContentSize,
			description: $.Description,
			'type': $.FileType,
			extension: $.FileExtension,
			versionData: $.VersionData
		}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>



	<flow name="main-query-schema-master-object-by-param-flow"

		doc:id="a55f47f9-0a63-41f6-b87a-9fdb8e8d72f0">
		<salesforce:query doc:name="Query"
			doc:id="66fd144d-67eb-4080-be4a-7b71ddcf2f53"

			config-ref="salesforceConfig" readTimeout="#[5000]"
			readTimeoutUnit="SECONDS">
			<salesforce:salesforce-query><![CDATA[SELECT Id,OwnerId,IsDeleted,Name,CreatedDate,CreatedById,LastModifiedById,LastModifiedDate,LastReferencedDate,LastViewedDate,SystemModstamp,VersionNumber__c 
FROM Schema_Master__c 
WHERE VersionNumber__c = ':param'
]]></salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output application/java
---
{
	param : vars.versionNumber
}]]]></salesforce:parameters>
		</salesforce:query>
		<ee:transform doc:name="Transform Message"

			doc:id="2e667c5c-6c7c-4dbc-829d-6cbcf422134b">

			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map {
	id: $.Id,
	name: $.Name,
	versionNumber: $.VersionNumber__c,
	createdDate: $.CreatedDate,
	createdById: $.CreatedById,
	sfdcSchemaMasterRecordId: $.SFDC_Schema_Master_Record_ID__c
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>


	<flow name="main-query-content-document-link-object-by-param-flow"

		doc:id="99b84a34-71e1-45a2-8125-5e7d9baffd70">
		<salesforce:query doc:name="Query"
			doc:id="a15902ae-4767-45db-8768-a403dc9c0504"

			config-ref="salesforceConfig" readTimeout="#[5000]"
			readTimeoutUnit="SECONDS">
			<salesforce:salesforce-query><![CDATA[SELECT ContentDocumentId,Id,IsDeleted,LinkedEntityId,ShareType,SystemModstamp,Visibility 
FROM ContentDocumentLink WHERE LinkedEntityId = ':param']]></salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output application/java
---
{
	param : vars.linkedEntityId
}]]]></salesforce:parameters>
		</salesforce:query>
		<ee:transform doc:name="Transform Message"

			doc:id="fb201f00-dfed-422d-bee9-0844dd0592d5">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map {
	id: $.Id,
	shareType: $.ShareType,
	visibility: $.Visibility,
	linkedEntityId: $.LinkedEntityId,
	contentDocumentId: $.ContentDocumentId,
	SystemModstamp: $.SystemModstamp
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>



	<!-- Diego's code -->
	<sub-flow name="main-log-flow"
		doc:id="dbf42755-0125-4c64-b6c0-76eff462938d">
		<ee:transform doc:name="Transform to JSON Payload"
			doc:id="a62d8640-3e36-4a39-b72a-d472e39639f6">
			<ee:message>
				<ee:set-payload><![CDATA[
output application/json

---
{
	TransactionId__c: payload.transactionId
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:create type="Log__c"
			doc:name="Create Log__c"
			doc:id="551a0c4e-35e8-4bf0-b161-98eee7f92a9a"
			config-ref="salesforceConfig" readTimeout="10000"
			readTimeoutUnit="MILLISECONDS" target="logResponse">
			<reconnect count="4"/>
			<salesforce:records><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:create>
		<json-logger:logger doc:name="Log__c"
			doc:id="43ee24a8-9da0-4488-8ecd-7838a1975846"
			config-ref="jsonLoggerConfig" message="RECORD CREATED"
			tracePoint="END" priority="DEBUG"/>
		<ee:transform doc:name="Transform Message"
			doc:id="be1a8db0-7db5-4b24-9021-046d61ef731b">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	code: "201",
	recordId: vars.logResponse.items[0].id,
	message: "Log__c successfully created"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="main-logentry-flow"
		doc:id="d7b93062-3148-4290-a8a6-d9930a173178">
		<ee:transform doc:name="Transform to JSON Payload"
			doc:id="bb6cd44d-9385-406e-a5b2-8d0676d70604">
			<ee:message>
				<ee:set-payload><![CDATA[
output application/json

---
{
	Log__c: payload.transactionId,
	ExceptionStackTrace__c: payload.exceptionStackTrace,
	ExceptionMessage__c: payload.exceptionMessage,
	Message__c: payload.message
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:create type="LogEntry__c"
			doc:name="Create LogEntry__c"
			doc:id="c4d9544e-a986-4f91-ac7a-53a4970821cd"
			config-ref="salesforceConfig" readTimeout="10000"
			readTimeoutUnit="MILLISECONDS" target="logResponse">
			<reconnect count="4"/>
			<salesforce:records><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:create>
		<json-logger:logger doc:name="Log LogEntry"
			doc:id="b6f18e44-4907-4884-ad84-ac8fda6de33a"
			config-ref="jsonLoggerConfig" message="RECORD CREATED"
			tracePoint="END" priority="DEBUG"/>
		<ee:transform doc:name="Transform Message"
			doc:id="9bd8092d-beb6-482e-b917-fd0095e1e053">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	code: "201",
	recordId: vars.logResponse.items[0].id,
	message: "LogEntry__c successfully created"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="main-query-ves-dbq-contention-by-flag-report-flow" doc:id="2aba4b61-d454-4be9-98fd-a23bb672e47e" >
		<salesforce:query doc:name="Query VES_DBQ_Contention__c" doc:id="1c5cddd3-7c2f-4137-944e-43418651fb91" config-ref="salesforceConfig" readTimeout="#[5000]" readTimeoutUnit="SECONDS" >
			<salesforce:salesforce-query ><![CDATA[SELECT Id, Exam_Related_Contention_Uuid__c, VES_ESR__c, VES_ESR__r.Event_Uuid__c, VES_ESR__r.Event_Dtg__c, VES_ESR__r.Previous_Event_Uuid__c, 
       VES_ESR__r.Model_Version__c, VES_ESR__r.Exam_Scheduling_Request_Uuid__c 
FROM VES_Contentions__c 
WHERE ReadyForRAP__c = true and RAPSent__c = false]]></salesforce:salesforce-query>
		</salesforce:query>
		<ee:transform doc:name="Transform Message" doc:id="96b38b9d-54d0-4023-a982-09dd3aed7147" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="main-query-s3-document-by-flag-report-flow" doc:id="c5d195b6-50b0-48b8-a136-431c0d8628b6" >
		<salesforce:query doc:name="Query S3_Document__c" doc:id="77a7f1b8-f612-456f-b0a0-427b91f7a987" config-ref="salesforceConfig" readTimeout="#[5000]" readTimeoutUnit="SECONDS" >
			<salesforce:salesforce-query ><![CDATA[Select Id,Document_URL__c,DocumentType__c,DBQ_Form__r.Id,DBQ_Form__r.Exam__r.Status,
DBQ_Form__r.VADocumentReferenceId__c,DBQ_Form__r.Exam__r.Id, DBQ_Form__r.DBQ__c
from S3_Document__c 
Where DBQ_Form__r.Exam__r.ReadyForReport__c =:param
AND DBQ_Form__r.Exam__r.ReportSent__c = null]]></salesforce:salesforce-query>
			<salesforce:parameters ><![CDATA[#[output application/java
---
{
	param : vars.reportReady
}]]]></salesforce:parameters>
		</salesforce:query>
		<ee:transform doc:name="Transform Message" doc:id="f1315845-32fb-49bd-9fed-3f6e456e0501" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

---
payload map {
	"Id": $.Id,
	"DBQ_Form__c": $.DBQ_Form__r.Id,
	"Document_URL__c": $.Document_URL__c,
	"Case__c": $.DBQ_Form__r.Exam__r.Id ,
	"DocumentType__c": $.DocumentType__c,
	"DBQ_Form__VADocumentReferenceId__c": $.DBQ_Form__r.VADocumentReferenceId__c,
	"DBQ_Form__Status": $.DBQ_Form__r.Exam__r.Status,
	"DBQ__c": $.DBQ_Form__r.DBQ__c
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="eed477f4-f491-4f6b-8306-21386b232be6" />
	</sub-flow>
	<sub-flow name="main-patch-dbq-form-object-flow" doc:id="5def0991-8a5a-423c-b881-4b5033bee5b8" >
		<json-logger:logger doc:name="Log DBQ_Form__c Request Payload" doc:id="b473bfdf-bbdb-4798-83a8-f0c1b73195af" config-ref="jsonLoggerConfig" tracePoint="BEFORE_TRANSFORM" message="DBQ_Form__c Request Payload"/>
		<set-variable value="#[payload]" doc:name="Set original Payload" doc:id="b8d324e5-a53a-4057-aec5-9047cb4986cf" variableName="originalPayload"/>
		<ee:transform doc:name="Transform Message" doc:id="d9211b1e-ec6f-4dcb-8f00-976ed3e17a2e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:update type="DBQ_Form__c" doc:name="Update DBQ_Form__c" doc:id="df2ac3d8-c62c-4196-9717-9152da120e6a" config-ref="salesforceConfig" >
			<salesforce:records ><![CDATA[#[[payload]]]]></salesforce:records>
		</salesforce:update>
		<choice doc:name="Choice" doc:id="3ee42a2a-bcbd-426f-b7ad-d56e4d9e38cb" >
			<when expression="#[payload.successful == true]">
				<set-payload value="#[%dw 2.0&#10;&#10;output json&#10;---&#10;vars.originalPayload]" doc:name="Set Payload" doc:id="d84e0647-6b3e-4d15-9dc0-8362318117f3" />
			</when>
			<otherwise >
				<set-variable value="400" doc:name="Set Variable" doc:id="38350e6d-13cb-425d-9cde-39e20103ab3f" variableName="httpStatus" />
				<ee:transform doc:name="Transform Message" doc:id="7f1bc73b-9efe-408b-b894-05be36aad63b">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	errorCode: "DBQ_FORM_PERSIST_ERROR",
	errorMessage: payload.items[0].message,
	transactionId: correlationId,
	timeStamp: now()
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<json-logger:logger doc:name="Log Exception" doc:id="434fdf91-044b-45f9-8bbf-146bbfe4a8ed" config-ref="jsonLoggerConfig" message="UPDATE EXCEPTION" tracePoint="EXCEPTION" priority="ERROR"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="main-query-account-by-external-id-flow" doc:id="7ee5ddd0-874c-4137-87f2-42c1807f6f99" >
		<json-logger:logger doc:name="Log externalId" doc:id="42414872-fa5b-40c8-8bbd-f7607f497159" config-ref="jsonLoggerConfig" message="Log externalId">
			<json-logger:content ><![CDATA[#[output application/json ---
{
    payload: vars.externalId
}]]]></json-logger:content>
		</json-logger:logger>
		<salesforce:query doc:name="Query for Account by External Id" doc:id="9ef85fc8-afee-48a4-a15b-4d6a5a0b1e54" config-ref="salesforceConfig" >
			<salesforce:salesforce-query ><![CDATA[Select Id from Account where External_Id__c = ':param']]></salesforce:salesforce-query>
			<salesforce:parameters ><![CDATA[#[output application/java
---
{
	param : vars.externalId
}]]]></salesforce:parameters>
		</salesforce:query>
		<ee:transform doc:name="Transform Message" doc:id="fb7ddf10-0b00-4958-b022-410348dce44d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="mian-query-ves-esr-by-param-flow" doc:id="bd5c0e31-20bd-43b3-849f-d4d5e510f993" >
		<salesforce:query doc:name="Query VES_ESR__c" doc:id="3d3b3ae9-0b58-4e33-b29b-f3201af8a550" config-ref="salesforceConfig" >
			<salesforce:salesforce-query ><![CDATA[SELECT Id, Exam_Scheduling_Request_Uuid__c
FROM VES_ESR__c
WHERE Exam_Scheduling_Request_Uuid__c = ':param']]></salesforce:salesforce-query>
			<salesforce:parameters ><![CDATA[#[output application/java
---
{
	"param" : payload.Id
}]]]></salesforce:parameters>
		</salesforce:query>
		<ee:transform doc:name="Transform Message" doc:id="2aef8a04-df54-4609-b2c1-628011587a6f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload[0]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="main-patch-ves-esr-by-id-flow" doc:id="4f0bf38e-c4f3-4203-9f96-49147da80fa8" >
		<json-logger:logger doc:name="Log VES_ESR__c Id" doc:id="7734bc45-72d1-480c-baf8-c3cf01e779f2" config-ref="jsonLoggerConfig" message="VA_ESR__c Id" >
		</json-logger:logger>
		<try doc:name="Try" doc:id="1c35637b-4e3d-4a36-8033-d6bb643bc5f2" >
			<flow-ref doc:name="mian-query-ves-esr-by-param-flow" doc:id="570a4f6e-95fb-4669-a0ef-e2f7ed9728e4" name="mian-query-ves-esr-by-param-flow" target="esrRecord"/>
			<ee:transform doc:name="Transform Message" doc:id="f14b37d6-b4d9-4adc-9998-5111309981fb" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	Id: vars.esrRecord.Id,
	Source_Medical_Records_of_Pages__c: payload.Source_Medical_Records_of_Pages__c
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<salesforce:update type="VES_ESR__c" doc:name="Update VES_ESR__c" doc:id="dc27b520-fd70-448e-8caa-9ff1b9419cd5" config-ref="salesforceConfig">
				<salesforce:records ><![CDATA[#[[payload]]]]></salesforce:records>
			</salesforce:update>
			<choice doc:name="Choice" doc:id="e089b6f5-7022-4f49-9fee-c94bfe5873c6" >
				<when expression="#[payload.successful == true]" >
					<ee:transform doc:name="Transform Message" doc:id="58d3bc96-4c0c-4402-8402-507e088ca411" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	recordId: payload.items[0].id,
	code: 201,
	message: "VES_ESR__c has been updated successfully"
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
				</when>
				<otherwise >
					<set-variable value="400" doc:name="Set httpStatus" doc:id="5df3a843-4882-45e0-8f23-b17b9aaaaa56" variableName="httpStatus" />
					<ee:transform doc:name="Transform Message" doc:id="d2aeadc8-bb2b-43b1-8400-cb315422a04d" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	errorCode: "VES_ESR_UPDATE_ERROR",
	errorMessage: payload.items[0].message,
	transactionId: correlationId,
	timeStamp: now()
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<json-logger:logger doc:name="Log Exception" doc:id="78bafec1-110e-4750-842f-95b4820771cf" config-ref="jsonLoggerConfig" message="UPDATE EXCEPTION" tracePoint="EXCEPTION" priority="ERROR" />
				</otherwise>
			</choice>
		</try>
	</sub-flow>

</mule>
